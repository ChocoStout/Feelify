//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cPanel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FeelifyEntities : DbContext
    {
        public FeelifyEntities()
            : base("name=FeelifyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actividades> Actividades { get; set; }
        public virtual DbSet<Albums> Albums { get; set; }
        public virtual DbSet<Artistas> Artistas { get; set; }
        public virtual DbSet<Canciones> Canciones { get; set; }
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<Generos> Generos { get; set; }
        public virtual DbSet<Paises> Paises { get; set; }
        public virtual DbSet<Playlists> Playlists { get; set; }
        public virtual DbSet<Sentimientos> Sentimientos { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TiposUsuarios> TiposUsuarios { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<PlaylistsCanciones> PlaylistsCanciones { get; set; }
        public virtual DbSet<UsuariosActividades> UsuariosActividades { get; set; }
        public virtual DbSet<UsuariosSentimientos> UsuariosSentimientos { get; set; }
    
        public virtual int insertarAlbumGenero(Nullable<int> album, Nullable<int> genero)
        {
            var albumParameter = album.HasValue ?
                new ObjectParameter("album", album) :
                new ObjectParameter("album", typeof(int));
    
            var generoParameter = genero.HasValue ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarAlbumGenero", albumParameter, generoParameter);
        }
    
        public virtual int insertarArtista(string nombre, Nullable<int> pais)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var paisParameter = pais.HasValue ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarArtista", nombreParameter, paisParameter);
        }
    
        public virtual int insertarCancion(string nombre, Nullable<System.TimeSpan> duracion, Nullable<int> numero, Nullable<int> album)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("duracion", duracion) :
                new ObjectParameter("duracion", typeof(System.TimeSpan));
    
            var numeroParameter = numero.HasValue ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(int));
    
            var albumParameter = album.HasValue ?
                new ObjectParameter("album", album) :
                new ObjectParameter("album", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarCancion", nombreParameter, duracionParameter, numeroParameter, albumParameter);
        }
    
        public virtual int insertarDisco(string nombre, string ruta, Nullable<System.DateTime> fecha, Nullable<int> artista)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var artistaParameter = artista.HasValue ?
                new ObjectParameter("artista", artista) :
                new ObjectParameter("artista", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarDisco", nombreParameter, rutaParameter, fechaParameter, artistaParameter);
        }
    
        public virtual int insertarEstados(string estado)
        {
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarEstados", estadoParameter);
        }
    
        public virtual int insertarGenero(string nombre, Nullable<int> pais)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var paisParameter = pais.HasValue ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarGenero", nombreParameter, paisParameter);
        }
    
        public virtual int insertarGenerosSentimientos(Nullable<int> genero, Nullable<int> sentimiento)
        {
            var generoParameter = genero.HasValue ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(int));
    
            var sentimientoParameter = sentimiento.HasValue ?
                new ObjectParameter("sentimiento", sentimiento) :
                new ObjectParameter("sentimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarGenerosSentimientos", generoParameter, sentimientoParameter);
        }
    
        public virtual int insertarPais(string nombrePais)
        {
            var nombrePaisParameter = nombrePais != null ?
                new ObjectParameter("nombrePais", nombrePais) :
                new ObjectParameter("nombrePais", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarPais", nombrePaisParameter);
        }
    
        public virtual int insertarPlaylist(string nombre, string descripcion, string ruta, Nullable<System.DateTime> fecha, Nullable<int> usuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarPlaylist", nombreParameter, descripcionParameter, rutaParameter, fechaParameter, usuarioParameter);
        }
    
        public virtual int insertarPlaylistCanciones(Nullable<int> playlist, Nullable<int> cancion)
        {
            var playlistParameter = playlist.HasValue ?
                new ObjectParameter("playlist", playlist) :
                new ObjectParameter("playlist", typeof(int));
    
            var cancionParameter = cancion.HasValue ?
                new ObjectParameter("cancion", cancion) :
                new ObjectParameter("cancion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarPlaylistCanciones", playlistParameter, cancionParameter);
        }
    
        public virtual int insertarSentimiento(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarSentimiento", nombreParameter);
        }
    
        public virtual int insertarTipoUsuario(string tipoUsuario)
        {
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("tipoUsuario", tipoUsuario) :
                new ObjectParameter("tipoUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarTipoUsuario", tipoUsuarioParameter);
        }
    
        public virtual int insertarUsuario(string nombre, string paterno, string materno, string correo, string password, string username, Nullable<int> pais, Nullable<int> tipo, Nullable<int> estado, string ruta)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var paternoParameter = paterno != null ?
                new ObjectParameter("paterno", paterno) :
                new ObjectParameter("paterno", typeof(string));
    
            var maternoParameter = materno != null ?
                new ObjectParameter("materno", materno) :
                new ObjectParameter("materno", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var paisParameter = pais.HasValue ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("ruta", ruta) :
                new ObjectParameter("ruta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarUsuario", nombreParameter, paternoParameter, maternoParameter, correoParameter, passwordParameter, usernameParameter, paisParameter, tipoParameter, estadoParameter, rutaParameter);
        }
    
        public virtual int insertarUsuarioActividad(Nullable<int> usuario, Nullable<int> actividad)
        {
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            var actividadParameter = actividad.HasValue ?
                new ObjectParameter("actividad", actividad) :
                new ObjectParameter("actividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarUsuarioActividad", usuarioParameter, actividadParameter);
        }
    
        public virtual int insertarUsuarioSentimiento(Nullable<int> usuario, Nullable<int> sentimiento)
        {
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(int));
    
            var sentimientoParameter = sentimiento.HasValue ?
                new ObjectParameter("sentimiento", sentimiento) :
                new ObjectParameter("sentimiento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarUsuarioSentimiento", usuarioParameter, sentimientoParameter);
        }
    
        public virtual ObjectResult<loginUsuario_Result> loginUsuario(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<loginUsuario_Result>("loginUsuario", usernameParameter, passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
